// This schema uses UUID v4 for all ID fields instead of auto-incrementing integers

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql" // Adjust based on your actual database
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(uuid())
  email             String            @unique
  password          String
  firstName         String?
  lastName          String?
  phoneNumber       String?
  profileImage      String?
  role              UserRole          @default(USER)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  properties        Property[]
  savedProperties   SavedProperty[]
  savedSearches     SavedSearch[]
  reviews           Review[]
  messages          Message[]
  notificationPrefs NotificationPref?
}

model Property {
  id             String          @id @default(uuid())
  title          String
  description    String
  price          Decimal         @db.Decimal(12, 2)
  address        String
  city           String
  state          String
  zipCode        String
  country        String          @default("USA")
  latitude       Float?
  longitude      Float?
  bedrooms       Int
  bathrooms      Float
  squareFeet     Int
  lotSize        Float?
  yearBuilt      Int?
  propertyType   PropertyType
  listingType    ListingType
  status         PropertyStatus  @default(ACTIVE)
  featuredImage  String?
  ownerId        String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  owner          User            @relation(fields: [ownerId], references: [id])
  images         PropertyImage[]
  features       Feature[]
  savedBy        SavedProperty[]
  reviews        Review[]
  openHouses     OpenHouse[]
  viewingHistory ViewHistory[]
  priceHistory   PriceHistory[]
}

model PropertyImage {
  id         String   @id @default(uuid())
  url        String
  caption    String?
  propertyId String
  createdAt  DateTime @default(now())
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Feature {
  id         String   @id @default(uuid())
  name       String
  value      String?
  category   String
  propertyId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model SavedProperty {
  id         String   @id @default(uuid())
  userId     String
  propertyId String
  createdAt  DateTime @default(now())
  notes      String?
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
}

model SavedSearch {
  id        String   @id @default(uuid())
  userId    String
  name      String?
  filters   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id         String   @id @default(uuid())
  rating     Int
  comment    String?
  userId     String
  propertyId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
}

model OpenHouse {
  id          String   @id @default(uuid())
  propertyId  String
  startTime   DateTime
  endTime     DateTime
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Message {
  id          String   @id @default(uuid())
  senderId    String
  recipientId String?
  content     String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  sender      User     @relation(fields: [senderId], references: [id])
}

model ViewHistory {
  id         String   @id @default(uuid())
  ipAddress  String?
  userId     String?
  propertyId String
  viewedAt   DateTime @default(now())
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PriceHistory {
  id         String   @id @default(uuid())
  propertyId String
  price      Decimal  @db.Decimal(12, 2)
  date       DateTime @default(now())
  changeType String // "LISTED", "PRICE_INCREASE", "PRICE_DECREASE", "SOLD"
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model NotificationPref {
  id                 String  @id @default(uuid())
  userId             String  @unique
  emailNotifications Boolean @default(true)
  pushNotifications  Boolean @default(true)
  savedSearchAlerts  Boolean @default(true)
  priceDropAlerts    Boolean @default(true)
  newListingAlerts   Boolean @default(true)
  openHouseReminders Boolean @default(true)
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  AGENT
  ADMIN
}

enum PropertyType {
  SINGLE_FAMILY
  CONDO
  TOWNHOUSE
  MULTI_FAMILY
  LAND
  APARTMENT
  OTHER
}

enum ListingType {
  FOR_SALE
  FOR_RENT
  SOLD
  PENDING
}

enum PropertyStatus {
  ACTIVE
  PENDING
  SOLD
  INACTIVE
  DRAFT
}
